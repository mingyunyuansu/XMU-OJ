import java.io.*;

/**
 * Created by mingy on 2016-05-03.
 */
public class Main {
    public static void main(String[] args) {
        File f1004 = new File("C:\\Users\\mingy\\Desktop\\1004");
        File[] fd1004 = f1004.listFiles();
        String[] codes1004 = new String[100];

        File f1005 = new File("C:\\Users\\mingy\\Desktop\\1005");
        File[] fd1005 = f1005.listFiles();
        String[] codes1005 = new String[100];

        File f1022 = new File("C:\\Users\\mingy\\Desktop\\1022");
        File[] fd1022 = f1022.listFiles();
        String[] codes1022 = new String[100];

        dealCodes(fd1004, codes1004);
        dealCodes(fd1005, codes1005);
        dealCodes(fd1022, codes1022);

        for (int i = 0; i < fd1005.length; ++i) {
            double max = 0;
            int max_to = 0;
            for (int j = 0; j < fd1005.length; ++j) {
                if (i == j) continue;
                else {
                    if (checkCopy(codes1005[i], codes1005[j]) > max) {
                        max = checkCopy(codes1005[i], codes1005[j]);
                        max_to = j;
                    }
                }
            }
            System.out.print(fd1005[i].getName() + " is most familiar to " + fd1005[max_to].getName() + ": ");
            System.out.printf("%.2f%%\n\n", max * 100);
        }
    }

    public static String getCode(File f) {
        Reader r = null;
        String s = "";
        try {
            r = new InputStreamReader(new FileInputStream(f));
            int t;
            while ((t = r.read()) != -1) {
                if ((char) t != '\r') {
                    s += String.valueOf((char) t);
                }
            }
            r.close();
        } catch (FileNotFoundException e) {
            System.out.print("File not find.\n");
        } catch (IOException e1) {
            System.out.print("Loading file error.\n");
        }
        return s;
    }

    public static double checkCopy(String s1, String s2) {
        int[][] c = new int[5000][5000];
        for (int i = 1; i <= s1.length(); ++i) {
            c[i][0] = 0;
        }
        for (int i = 0; i <= s2.length(); ++i) {
            c[0][i] = 0;
        }
        for (int i = 0; i < s1.length(); ++i)
            for (int j = 0; j < s2.length(); ++j) {
                if (s1.charAt(i) == s2.charAt(j))
                    c[i + 1][j + 1] = c[i][j] + 1;
                else if (c[i][j + 1] >= c[i + 1][j])
                    c[i + 1][j + 1] = c[i][j + 1];
                else
                    c[i + 1][j + 1] = c[i + 1][j];
            }
        return (double) c[s1.length()][s2.length()] / Math.min(s1.length(), s2.length());
    }

    public static void dealCodes(File[] fd, String[] codes) {
        for (int i = 0; i < fd.length; ++i) {
            codes[i] = getCode(fd[i]);

            if (codes[i].contains("//")) {
                int n = codes[i].indexOf("//");
                int m = codes[i].indexOf("\n", n);
                String ns = codes[i].substring(0, n) + codes[i].substring(m + 1);
                while (ns.contains("//")) {
                    n = ns.indexOf("//");
                    m = ns.indexOf("\n", n);
                    ns = ns.substring(0, n) + ns.substring(m + 1);
                }
                codes[i] = ns;
            }
            if (codes[i].contains("/*")) {
                int n = codes[i].indexOf("/*");
                int m = codes[i].indexOf("*/", n);
                String ns = codes[i].substring(0, n) + codes[i].substring(m + 1);
                while (ns.contains("/*")) {
                    n = ns.indexOf("/*");
                    m = ns.indexOf("*/", n);
                    ns = ns.substring(0, n) + ns.substring(m + 1);
                }
                codes[i] = ns;
            }
        }
    }
}
